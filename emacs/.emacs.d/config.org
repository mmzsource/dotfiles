#+TITLE: Emacs Configuration
#+AUTHOR: M.Metz

This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley.

* Installing Emacs

On macOS, I use [[http://brew.sh/][homebrew]] to install emacs.

Check "brew info emacs" to see if install options are still valid.

#+begin_src sh
brew install emacs --build-from-source --with-cocoa --with-gnutls --with-imagemagick@6
#+end_src

- build-from-source to prevent dependency problem with jpeg library
- cocoa to enable the emacs.app
- gnutls to enable setting up secure communication
- imagemagick to work with images

Create a symbolic link to emacs from the application directory:

#+begin_src sh
ln -s /usr/local/Cellar/emacs/25.3/Emacs.app ~/Applications/
#+end_src

* Override standard emacs behaviour
** Sizes

I like this as a default size for my emacs app window:

#+begin_src emacs-lisp
(if (window-system) (set-frame-size (selected-frame) 112 64))
#+end_src

** Sensible defaults

I use [[https://github.com/hrs/sensible-defaults.el][sensible defaults]] for some basic settings.

#+begin_src emacs-lisp
(load-file "~/.emacs.d/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
(sensible-defaults/backup-to-temp-directory)
#+end_src

(load-file needs the complete path because emacs can be started from any
location on the terminal. In that case relative paths won't work)

** Disable annoying (visible) bells

[[http://stackoverflow.com/questions/11679700/emacs-disable-beep-when-trying-to-move-beyond-the-end-of-the-document][Disable Annoying Alarms]]

#+begin_src emacs-lisp
(defun my-bell-function ())
(setq ring-bell-function 'my-bell-function)
(setq visible-bell nil)
#+end_src

* Packages

** Smex

Smex adds history and suggestions to M-x

#+begin_src emacs-lisp
(use-package smex
  :ensure t
  :bind (("M-x"         . smex)
         ("M-X"         . smex-major-mode-commands)
         ("C-c C-c M-x" . execute-extended-command)))
#+end_src

Main Usage:

| Keybinding  | Description                                       |
|-------------+---------------------------------------------------|
| M-x         | Same as old M-x but with history & suggestions    |
| M-X         | Only show commands relevant to current major mode |
| C-c C-c M-x | Link to old M-x command                           |
|-------------+---------------------------------------------------|
| C-h w       | 'Where is' - shows kbd for selected command       |
| C-h f       | Runs 'describe Function' on selected command      |
| M-.         | Jumps to definition of selected command           |
|-------------+---------------------------------------------------|

** Neotree

Neotree shows your directories and files in a tree view.

#+begin_src emacs-lisp
(use-package neotree
  :ensure t
  :bind (("<f8>" . neotree-toggle)))
#+end_src

Main Usage:

| Keybinding | Description                      |
|------------+----------------------------------|
| f8         | Toggle neotree                   |
|------------+----------------------------------|
| g          | Refresh neotree                  |
| H          | Toggle display hidden files      |
|------------+----------------------------------|
| C-c C-n    | Create a new file or directory   |
| C-c C-d    | Delete a file or directory       |
| C-c C-r    | Rename a file or directory       |
| C-c C-c    | Change root directory to display |
|------------+----------------------------------|

** Engine-Mode

Engine-mode allows me to do internet searches on configured search engines.

#+BEGIN_SRC emacs-lisp
(use-package engine-mode
  :ensure t)

;; enable engine-mode globally
(engine-mode t)

(defengine amazon
  "https://www.amazon.com/s/ref=nb_sb_noss?field-keywords=%s"
  :keybinding "a")

(defengine dictionary
  "http://www.dictionary.com/browse/%s"
  :keybinding "d")

(defengine google
  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
  :keybinding "g")

(defengine github
  "https://github.com/search?ref=simplesearch&q=%s"
  :keybinding "h")

(defengine google-images
  "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
  :keybinding "i")

(defengine google-maps
  "http://maps.google.com/maps?q=%s"
  :keybinding "m")

(defengine qwant
  "https://www.qwant.com/?q=%s"
  :keybinding "q")

(defengine stack-overflow
  "https://stackoverflow.com/search?q=%s"
  :keybinding "s")

(defengine google-translate
  "https://translate.google.com/#auto/en/%s"
  :keybinding "t")

(defengine wikipedia
  "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
  :keybinding "w")

(defengine youtube
  "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
  :keybinding "y")
#+END_SRC

Main usage:

C-x / <key for your engine here> for invoking engine-mode

If your cursor is on a word when invoking engine-mode, that word will
be the default search value unless you overwrite it by typing another
search term.

If you have selected a piece of text (C-SPC ...) and invoke
engine-mode, that piece of text will be your search string.

So for instance I want to search for "emil ernebro" on youtube:

- C-x / y
- type "emil ernebro"
- engine-mode will open youtube and search for emil ernebro

Other way to search for "emil ernebro", this time on google-images:

- Select "emil ernebro" in the current textbuffer
- C-x / i

** Next Package
