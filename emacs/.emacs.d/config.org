#+TITLE: Emacs Configuration
#+AUTHOR: M.Metz

The emacs-lisp code in this file will run when emacs starts. A great use case
for [[https://en.wikipedia.org/wiki/Literate_programming]['literate programming']] imho.

Again (as already stated in the README.md) mostly inspired by / copied from
[[https://github.com/hrs/dotfiles][hrs/dotfiles]].

* Installing Emacs

On macOS, I use [[http://brew.sh/][homebrew]] to install emacs.

Check "brew info emacs" to see if install options are still valid.

#+begin_src sh
brew install emacs --build-from-source --with-cocoa --with-gnutls --with-imagemagick@6
#+end_src

- ~--build-from-source~ to prevent dependency problem with jpeg library
- ~-with-cocoa~ to enable the emacs.app
- ~--with-gnutls~ to enable setting up secure communication
- ~--with-imagemagick@6~ to work with images

Create a symbolic link to emacs from the application directory:

#+begin_src sh
ln -s /usr/local/Cellar/emacs/25.3/Emacs.app ~/Applications/
#+end_src

* Override standard emacs behaviour
** UI
*** (No) Menu & (no) scroll bar

I have never felt the need to use the menu or the scroll bar in emacs.

#+begin_src emacs-lisp
(tool-bar-mode 0)
(menu-bar-mode 0)
(when window-system
  (scroll-bar-mode -1))
(setq scroll-conservatively 100)
#+end_src

The 'scroll-conservatively' makes sure emacs doesn't recenter the cursor after
scrolling.

*** Window Size

I like this as a default size for my emacs app window:

#+begin_src emacs-lisp
(when window-system
  (set-frame-size (selected-frame) 112 56))
#+end_src

Keybindings to resize windows within emacs app window:

#+begin_src emacs-lisp
(bind-key "s-C-<left>"  'shrink-window-horizontally)
(bind-key "s-C-<right>" 'enlarge-window-horizontally)
(bind-key "s-C-<down>"  'shrink-window)
(bind-key "s-C-<up>"    'enlarge-window)
#+end_src

Unfortunately, the order of the '(no) menu & (no) scroll bar' paragraph and the
'window size' paragraph is important. If you change the order (window size
first), the window size will be the standard emacs window size, not the
specified size.

In addition, since I've activated 'save-desktop', emacs will remember the
settings of my last session. Therefore, this windowsize will only be used when
starting emacs from the terminal with the =--no-desktop= switch.

*** Font Size and Resizing

Resize text in every buffer and also in modeline. Also increases app window.
Default zoom bindings still work (=C-x C-+= etc.)

#+BEGIN_SRC emacs-lisp
(setq mmz/default-font "Menlo")
(setq mmz/default-font-size 14)
(setq mmz/current-font-size mmz/default-font-size)

(setq mmz/font-change-increment 1.1)

(defun mmz/font-code ()
  "Return a string representing the current font (like \"Menlo-14\")."
  (concat mmz/default-font "-" (number-to-string mmz/current-font-size)))

(defun mmz/set-font-size ()
  "Set the font to `mmz/default-font' at `mmz/current-font-size'.
   Set that for the current frame, and also make it the default for
   other, future frames."
  (let ((font-code (mmz/font-code)))
    (add-to-list 'default-frame-alist (cons 'font font-code))
    (set-frame-font font-code)))

(defun mmz/reset-font-size ()
  "Change font size back to `mmz/default-font-size'."
  (interactive)
  (setq mmz/current-font-size mmz/default-font-size)
  (mmz/set-font-size))

(defun mmz/increase-font-size ()
  "Increase current font size by a factor of `mmz/font-change-increment'."
  (interactive)
  (setq mmz/current-font-size
        (ceiling (* mmz/current-font-size mmz/font-change-increment)))
  (mmz/set-font-size))

(defun mmz/decrease-font-size ()
  "Decrease current font size by a factor of `mmz/font-change-increment', down to a minimum size of 1."
  (interactive)
  (setq mmz/current-font-size
        (max 1
             (floor (/ mmz/current-font-size mmz/font-change-increment))))
  (mmz/set-font-size))

(define-key global-map (kbd "C-)") 'mmz/reset-font-size)
(define-key global-map (kbd "C-+") 'mmz/increase-font-size)
(define-key global-map (kbd "C-=") 'mmz/increase-font-size)
(define-key global-map (kbd "C-_") 'mmz/decrease-font-size)
(define-key global-map (kbd "C--") 'mmz/decrease-font-size)

(mmz/reset-font-size)
#+END_SRC

*** Highlight current line

Softly highlight the current line:

#+begin_src emacs-lisp
(when window-system
  (global-hl-line-mode))
#+end_src

*** Disable annoying (visible) bells

[[http://stackoverflow.com/questions/11679700/emacs-disable-beep-when-trying-to-move-beyond-the-end-of-the-document][Disable Annoying Alarms]]

#+begin_src emacs-lisp
(defun my-bell-function ())
(setq ring-bell-function 'my-bell-function)
(setq visible-bell nil)
#+end_src

*** Wrap paragraphs automatically

AutoFillMode automatically wraps paragraphs. If you prefer to do it manually
disable this code and hit =M-q= with the cursor in the paragraph you want to
wrap.

Toggles wrapping with =C-c q=

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'gfm-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)

(global-set-key (kbd "C-c q") 'auto-fill-mode)
#+end_src

*** Themes

The [[https://github.com/bbatsov/solarized-emacs/][bbatsov solarized theme]] is quite easy on the eyes. However, I like the
default emacs theme. Therefore, I only load solarized when needed / wanted
with =M-x load-theme= (If I want solarized-dark as default, I'll have to add
=(load-theme 'solarized-dark t)= to this config)

Since I'm saving my desktop when closing emacs, an applied theme will also be
loaded when restarting emacs. To be able to 'reload' the default theme, I've
started =emacs --no-desktop=, started the theme editor with =M-x
customize-create-theme= and saved that theme as 'default'.

So after applying another theme, I can now always return to my default theme by
=M-x load-theme default=.

#+begin_src emacs-lisp
(use-package solarized-theme
  :defer 10
  :init
  (setq solarized-use-variable-pitch  nil)
  (setq solarized-scale-org-headlines nil)
  :ensure t)
#+end_src

*** Fancy Lambda's

Eye candy:

#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC

** Sensible defaults

I use most of [[https://github.com/hrs/sensible-defaults.el][sensible defaults]] for basic settings, but I decided to inline
it into this file, to reduce the *magic*.

#+BEGIN_SRC emacs-lisp

;; When opening a file start at home directory
(setq default-directory "~/")

;; Allow 20MB of memory before calling GC
(setq gc-cons-threshold 20000000)

;; Call delete-trailing-whitespace every time a buffer is saved
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Treat camel-case as separate words
(add-hook 'prog-mode-hook 'subword-mode)

;; When opening a file, always follow symlinks
(setq vc-follow-symlinks t)

;; When saving a file that starts with '#!', make it executable
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)

;; Single space after periods
(setq sentence-end-double-space nil)

;; Offer to create directories on save
(add-hook 'before-save-hook
  (lambda ()
    (when buffer-file-name
      (let ((dir (file-name-directory buffer-file-name)))
        (when (and (not (file-exists-p dir))
                        (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
          (make-directory dir t))))))

;; Apply changes to highlighted region
(transient-mark-mode t)

;; Delete selected text when I start typing
(delete-selection-mode t)

;; Ensure that files end with newline
(setq require-final-newline t)

;; Don't present the usual startup message and clear the scratch buffer
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

;; Make dired file sizes human readable
(setq-default dired-listing-switches "-alh")

;; "y/n" instead of "yes/no"
(fset 'yes-or-no-p 'y-or-n-p)

;; Don't ask me which buffer to kill, just kill 'this' buffer
(global-set-key (kbd "C-x k") 'kill-this-buffer)

;; Enable syntax highlighting whenever possible
(global-font-lock-mode t)

;; Refresh buffers when files change
(global-auto-revert-mode t)

;; Show matching parens
(show-paren-mode t)
(setq show-paren-delay 0.0)

;; Set default linelength
(setq-default fill-column 80)

;; When double clicking on a file in finder open it as a buffer in the
;; existing emacs frame, rather than creating a new frame just for that file
(setq ns-pop-up-frames nil)

;; Yank text where point is, not where mouse cursor is
(setq mouse-yank-at-point t)


(defun backup-to-temp-directory ()
  "Store backups and auto-saved files in
  TEMPORARY-FILE-DIRECTORY (which defaults to /tmp on Unix),
  instead of in the same directory as the file. This means we're
  still making backups, but not where they'll get in the way.
  WARNING: on most Unix-like systems /tmp is volatile, in-memory
  storage, so your backups won't survive if your computer crashes!
  If you're not willing to take this risk, you shouldn't enable
  this setting."
  (setq backup-directory-alist
    `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
    `((".*" ,temporary-file-directory t))))
#+END_SRC

** Recent Files

Build a list of recently used files, easily accessible via the "C-x C-r" keybinding.

#+begin_src emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 32)
(global-set-key (kbd "C-x C-r") 'recentf-open-files)
#+end_src

** Desktop Save Mode

Most of the times it's convenient that emacs opens previously opened files
when starting up (unless specified files are given as startup arguments).
=desktop-save-mode= does the trick.

#+BEGIN_SRC emacs-lisp
(desktop-save-mode 1)
#+END_SRC

To start emacs without opening last session's files, start it by =emacs --no-desktop=

* Org-mode
** Display preferences

Pretty bullets instead of asterisks.

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
 :ensure t
 :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

Nice arrow instead of the usual ellipsis (=...=) when stuff is folded.

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "â¤µ")
#+END_SRC

** Keybindings

#+begin_src emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)
#+end_src

** Agenda files

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files
  '("~/Dropbox/org/pathis.org"
    "~/Dropbox/org/department.org"
    "~/Dropbox/org/leisure.org"))
#+END_SRC

** Code blocks

Syntax highlighting in source blocks while editing.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

Quickly insert a block of elisp by typing =<el= and hitting =<TAB>=:

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
  '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

Allow =babel= to evaluate Emacs lisp:

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
    '((emacs-lisp . t)))
#+END_SRC

Don't ask before evaluating code blocks.

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

** Keywords

My todo workflow:

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
;;'((sequence "TODO(t)" "BUSY(b!)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELLED(c@/!)")))
  '((sequence "TODO(t)" "BUSY(b!)" "WAIT(w!)" "|" "DONE(d!)" "CANCELLED(c!)")))

#+END_SRC

The items before the pipe ="|"= need action while the items behind it need no
further action. The special characters are:

- =<char>= for fast access key definition (prompted for after =C-c C-t=)
- =!= for adding a timestamp
- =@= for prompting for a note

=-edit-=

I found out that I want to be able to cycle quickly through my items
=(S-<arrow>)= and only add notes when needed. Therefore, I commented my earlier
todo-keyword definition, but leave it here in case I want to activate them
again.

Checkboxes are not included in the global TODO list and can be used to split a
todo item into a number of simpler tasks:

- [X] plan workflow
- [-] implement workflow
  - [X] add workflow
  - [X] explain workflow
  - [ ] test workflow

* Packages

This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley.

** Smex

Smex adds history and suggestions to M-x

#+begin_src emacs-lisp
(use-package smex
  :ensure t
  :bind (("M-x"         . smex)
         ("M-X"         . smex-major-mode-commands)
         ("C-c C-c M-x" . execute-extended-command)))
#+end_src

Main Usage:

| Keybinding  | Description                                       |
|-------------+---------------------------------------------------|
| M-x         | Same as old M-x but with history & suggestions    |
| M-X         | Only show commands relevant to current major mode |
| C-c C-c M-x | Link to old M-x command                           |
|-------------+---------------------------------------------------|
| C-h w       | 'Where is' - shows kbd for selected command       |
| C-h f       | Runs 'describe Function' on selected command      |
| M-.         | Jumps to definition of selected command           |
|-------------+---------------------------------------------------|

** Neotree

Neotree shows your directories and files in a tree view.

#+begin_src emacs-lisp
(use-package neotree
  :ensure t
  :bind (("<f8>" . neotree-toggle)))
#+end_src

Main Usage:

| Keybinding | Description                      |
|------------+----------------------------------|
| f8         | Toggle neotree                   |
|------------+----------------------------------|
| g          | Refresh neotree                  |
| H          | Toggle display hidden files      |
|------------+----------------------------------|
| C-c C-n    | Create a new file or directory   |
| C-c C-d    | Delete a file or directory       |
| C-c C-r    | Rename a file or directory       |
| C-c C-c    | Change root directory to display |
|------------+----------------------------------|

** Engine-Mode

Engine-mode allows me to do internet searches on configured search engines.

#+BEGIN_SRC emacs-lisp
(use-package engine-mode
  :ensure t)

;; enable engine-mode globally
(engine-mode t)

(defengine amazon
  "https://www.amazon.com/s/ref=nb_sb_noss?field-keywords=%s"
  :keybinding "a")

(defengine dictionary
  "http://www.dictionary.com/browse/%s"
  :keybinding "d")

(defengine google
  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
  :keybinding "g")

(defengine github
  "https://github.com/search?ref=simplesearch&q=%s"
  :keybinding "h")

(defengine google-images
  "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
  :keybinding "i")

(defengine google-maps
  "http://maps.google.com/maps?q=%s"
  :keybinding "m")

(defengine qwant
  "https://www.qwant.com/?q=%s"
  :keybinding "q")

(defengine stack-overflow
  "https://stackoverflow.com/search?q=%s"
  :keybinding "s")

(defengine google-translate
  "https://translate.google.com/#auto/en/%s"
  :keybinding "t")

(defengine wikipedia
  "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
  :keybinding "w")

(defengine youtube
  "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
  :keybinding "y")
#+END_SRC

Main usage:

C-x / <key for your engine here> for invoking engine-mode

If your cursor is on a word when invoking engine-mode, that word will
be the default search value unless you overwrite it by typing another
search term.

If you have selected a piece of text (C-SPC ...) and invoke
engine-mode, that piece of text will be your search string.

So for instance I want to search for "emil ernebro" on youtube:

- C-x / y
- type "emil ernebro"
- engine-mode will open youtube and search for emil ernebro

Other way to search for "emil ernebro", this time on google-images:

- Select "emil ernebro" in the current textbuffer
- C-x / i

** Magit

Magit is a brilliant interface to git. It provides several 'popups' (like
commit, push, log, diff) which guide you through the (git) options.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-c g" . magit-status)))
#+end_src

Main Usage:

| Keybinding | Description                         |
|------------+-------------------------------------|
| C-c g      | (ma)git status                      |
|------------+-------------------------------------|
| h          | list all popups + commands          |
| g          | Refresh                             |
| n          | Next section                        |
| p          | Previous section                    |
| TAB        | expand or collapse section at point |
|------------+-------------------------------------|
| s          | stage                               |
| u          | unstage                             |
| c          | commit popup                        |
| C-c C-c    | really commit                       |
| P          | push popup                          |
| u          | push to upstream                    |
|------------+-------------------------------------|

** RestClient

I'm using Restclient to test REST calls from text files.
Additional info on [[https://github.com/pashky/restclient.el][github]] (including examples)

#+begin_src emacs-lisp
(use-package restclient
  :ensure t)
#+end_src

Main Usage:

| Keybinding | Description                                      |
|------------+--------------------------------------------------|
| C-c C-c    | runs query under cursor, switch to result window |
| C-c C-v    | runs query under cursor, stays in current window |
| C-c C-p    | jump to previous query                           |
| C-c C-n    | jump to next query                               |
| C-c C-.    | mark the query under the cursor                  |
| C-c C-u    | copy query under the cursor as curl cmd          |
|------------+--------------------------------------------------|

** Markdown

Use markdown mode, also for my foldingtext files

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure   t
  :commands (markdown-mode gfm-mode)
  :mode     (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'"       . markdown-mode)
             ("\\.markdown\\'" . markdown-mode)
             ("\\.ft\\'"       . markdown-mode))
  :init     (setq markdown-command "multimarkdown"))
#+end_src

* Debugging

Sometimes adding a package doesn't work as expected. In those cases you can try
several things:

- Try starting emacs from the terminal with ~emacs --debug-init~
- Set ~use-package-verbose~ to ~t~ . Errors occuring while initializing or
  configuring a package will not stop emacs from loading. With this setting the
  errors will be reported to a special ~*Warnings*~ popup buffer so you can debug
  the package loading.
- Try ~package-refresh-contents~ or check if the troublesome package is in
  ~package-list-packages~
* Ideas

** DONE Make TODO, BUSY, WAITING, DONE the default org-mode todo-states. [[http://doc.norang.ca/org-mode.html][Example]]
   - State "DONE"       from "WAIT"       [2017-10-22 Sun 09:57]
   - State "BUSY"       from "TODO"       [2017-10-22 Sun 08:40]
** DONE Define org folder (for summarizing todo's in org-mode)
   - State "DONE"       from "WAIT"       [2017-10-22 Sun 10:51]
   - State "WAIT"       from "BUSY"       [2017-10-22 Sun 10:51]
   - State "BUSY"       from "TODO"       [2017-10-22 Sun 10:40]
** DONE Maybe inline sensible defaults; reduce the magic, make things explicit when possible
** DONE Not so sure about the 'Are you sure' question when closing emacs
** DONE Default size of font when starting emacs is 1 zoomfactor too small imho. Change default.
** DONE Open last opened file after startup
** DONE Don't ask confirmation when I kill a buffer
** TODO Add and configure winner mode [[https://github.com/sachac/.emacs.d/blob/83d21e473368adb1f63e582a6595450fcd0e787c/Sacha.org#winner-mode---undo-and-redo-window-configuration][winner mode in sacha's config]]
** TODO Add and configure undo tree mode [[https://github.com/sachac/.emacs.d/blob/83d21e473368adb1f63e582a6595450fcd0e787c/Sacha.org#undo-tree-mode---visualize-your-undos-and-branches][undo tree mode in sacha's config]]
** TODO Add and configure company
** TODO Add and configure paredit
** TODO Add and configure paredit-everywhere
** TODO Add and configure highlight-parentheses
** TODO Add and configure rainbow-delimiters
** TODO Add and configure cider
** TODO Add and configure clojure snippets
** TODO Add and configure ya-snippets? Or [[http://doc.norang.ca/org-mode.html#Yasnippets][abbrev-mode and skeletons?]]
** TODO Add and configure flycheck / proselint
** TODO Work with ssh
